/* STEPS 8 & 9 - VISUALIZATION DURING DEVELOPMENT, CONTINUED:
  // First, we try setting "box-sizing" to "content-box" explicitly, with the global "*" selector
  // At this point, we don't see any changes, because we are using the default value

  // The "border-box" sizing model does the opposite of "content-box"
  // The total width of the element, including padding and border, will be the explicit width set
  // The content of the element will shrink to make room for the padding and border
  // Next, we change the "box-sizing" property to "border-box" and notice how the blue image borders now fit within the red gallery border */

* {
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: sans-serif;
  background: #f5f6f7;
}

/* STEP 13 - TEXT STYLING:
  // We align our ".header" text in the center and make the text uppercase using the "text-transform" property with "uppercase" as the value */

.header {
  text-align: center;
  text-transform: uppercase;
  padding: 32px;
  background-color: #0a0a23;
  color: #fff;
  border-bottom: 4px solid #fdb347;
}

/* STEPS 7 & 8 - VISUALIZATION DURING DEVELOPMENT:
  // In order to better visualize how your elements are sized, adding a border can be helpful
  // Originally, we give our ".gallery" element a "width" of "50%" and a "border" set to "5px solid red"; then, we give our "img" elements a "width" of "100%," "padding" set to "5px", and a "border" set to "5px solid blue":
    // // .gallery {
            border: 5px solid red;
            width: 50%;
          }
          img {
            width: 100%;
            border: 5px solid blue;
            padding: 5px;
          }

  // In doing so, we notice how the blue image border extends beyond the red gallery border, which is due to the way browsers calculate the size of container elements
  // The "box-sizing" property is used to set this behavior
  // By default, the "content-box" model is used
  // With this model, when an element has a specific width, that width is calculated based only on the element's content
  // Padding and border values get added to the total width, so the element grows to accommodate these values */

/* STEPS 14 thru 18 - FLEXBOX:
  // Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container
  // To use it, give an element a "display" property of "flex" to make the element a "flex container"
  // Any direct children of a flex container are called "flex items"
  // First, we use the ".gallery" selector to make it a flex container 
  
  // Flexbox has a main and cross axis
  // The main axis is defined by the flex-direction property, which has four possible values:
    // // "row" (default): horizontal axis with flex items from left to right
    // // "row-reverse": horizontal axis with flex items from right to left
    // // "column": vertical axis with flex items from top to bottom
    // // "column-reverse": vertical axis with flex items from bottom to top
    // // Note the axes and directions will be different depending on the text direction; the values shown are for a left-to-right text direction

  // The "flex-wrap" property determines how your flex items behave when the flex container is too small
  // Setting it to "wrap" will allow the items to wrap to the next row or column; "nowrap" (default) will prevent your items from wrapping and shrink them if needed
  // Here, we use "flex-wrap: wrap" to make it so our flex items wrap to the next row when they run out of space 
  
  // The "justify-content" property determines how the items inside a flex container are positioned along the main axis, affecting their position and the space around them
  // Here, we give our ".gallery" selector a "justify-content" property with "center" as the value 
  
  // The "align-items" property positions the flex content along the cross axis
  // In this case, with our "flex-direction" set to "row", the cross axis would be vertical
  // Thus, to vertically center our images, we give the ".gallery" selector an "align-items" property with "center" as the value */

/* STEP 21 - GAP:
  // Originally, oour images need some space between them
  // The "gap" CSS shorthand property sets the gaps, also known as "gutters," between rows and columns
  // The "gap" property and its "row-gap" and "column-gap" sub-properties provide this functionality for flex, grid, and multi-column layout
  // You apply the property to the container element

  // Here, we give our ".gallery" flex container a "gap" property with "16px" as the value */

.gallery {
  display: flex;
  flex-direction: row;
  flex-wrap: wrap;
  justify-content: center;
  align-items: center;
  gap: 16px;
  max-width: 1400px;
  margin: 0 auto;
  padding: 20px 10px;
}

/* STEP 11 - ADJUSTING SIZING:
  // Originally, our images are too big so we create a ".gallery img" selector to target them and give them all a "width" of "100%" and a "max-width" of "350px", and also set the "height" property to "300px" to keep our images a uniform size */

/* STEP 20 - ASPECT RATIOS:
  // Originally, some of our images become distorted because they have different aspect ratios
  // Rather than setting each aspect ratio individually, you can use the "object-fit" property to determine how images should behave
  // Here, we give our ".gallery img" selector the "object-fit" property set to "cover" to tell the image to fill the <img> container while maintaining aspect ratio, resulting in cropping to fit */

.gallery img {
  width: 100%;
  max-width: 350px;
  height: 300px;
  object-fit: cover;
  border-radius: 10px;
}

/* STEP 23 - THE "AFTER" PSEUDO-ELEMENT:
  // The "::after" pseudo-element creates an element that is the last child of the selected element
  // Here, we use it to add an empty element after the last image
  // If we give it the same "width" as the images it will push the last image to the left when the gallery is in a two-column layout; originally, it is in the center because we set "justify-content: center" on the flex container
  // Example:
    // // .container::after {
            content: "";
            width: 860px;
          }
*/

.gallery::after {
  content: "";
  width: 350px;
}
